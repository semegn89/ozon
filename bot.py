# DEPRECATED: This file is kept for reference
# Use bot_new.py for the new implementation

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
)
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
)
import logging

# WARNING: Tokens should be in .env file, not hardcoded!
TOKEN = '7870121478:AAGtGNo-Hrx3Ox4OZsbuqZniexzeR_tl47w'
ADMIN_CHAT_ID = 318073844  # <-- –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π chat_id –ø–æ–∑–∂–µ

# ---------- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–æ–¥–µ–ª–µ–π, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ ----------
MODELS = {
    'lac': {
        'name': "LAC LAICHY L-6707",
        'manual_file_id': 'file_id_–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏_lac',
        'recipes_file_id': 'file_id_—Ä–µ—Ü–µ–ø—Ç–æ–≤_lac',
        'manual_text': "–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è LAC LAICHY L-6707.",
        'recipes_text': "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è LAC LAICHY L-6707.",
    },
    'orv': {
        'name': "ORVIKA ORM-8861",
        'manual_file_id': 'file_id_–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏_orv',
        'recipes_file_id': 'file_id_—Ä–µ—Ü–µ–ø—Ç–æ–≤_orv',
        'manual_text': "–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è ORVIKA ORM-8861.",
        'recipes_text': "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è ORVIKA ORM-8861.",
    },
    # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

# -------------- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------------
user_support_state = {}

# -------------- –õ–æ–≥–≥–µ—Ä -----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------
def main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton("üì¶ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data='choose_model')],
        [InlineKeyboardButton("üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã", callback_data='recipes')],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='support')],
    ]
    return InlineKeyboardMarkup(buttons)

def models_keyboard():
    buttons = []
    for model_id, data in MODELS.items():
        buttons.append([InlineKeyboardButton(data["name"], callback_data=f'model_{model_id}')])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')])
    return InlineKeyboardMarkup(buttons)

def model_options_keyboard(model_id):
    buttons = [
        [InlineKeyboardButton("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f'manual_{model_id}')],
        [InlineKeyboardButton("üçΩÔ∏è –ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data=f'recipes_{model_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –º–æ–¥–µ–ª—è–º", callback_data='choose_model')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

# ------------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------------
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    if data == 'main_menu':
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

    elif data == 'choose_model':
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=models_keyboard())

    elif data.startswith('model_'):
        model_id = data.split('_')[1]
        model = MODELS.get(model_id)
        if model:
            query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å:\n<b>{model['name']}</b>",
                reply_markup=model_options_keyboard(model_id),
                parse_mode=ParseMode.HTML
            )
        else:
            query.edit_message_text("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=models_keyboard())

    elif data.startswith('manual_'):
        model_id = data.split('_')[1]
        model = MODELS.get(model_id)
        if model and model.get('manual_file_id'):
            context.bot.send_document(
                chat_id=query.message.chat_id,
                document=model['manual_file_id'],
                caption=model['manual_text']
            )
            query.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        else:
            query.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

    elif data.startswith('recipes_'):
        model_id = data.split('_')[1]
        model = MODELS.get(model_id)
        if model and model.get('recipes_file_id'):
            context.bot.send_document(
                chat_id=query.message.chat_id,
                document=model['recipes_file_id'],
                caption=model['recipes_text']
            )
            query.answer("–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        else:
            query.answer("–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

    elif data == 'recipes':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤:", reply_markup=models_keyboard())

    elif data == 'support':
        user_support_state[user_id] = True
        query.edit_message_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ. –ú—ã –ø–æ–º–æ–∂–µ–º!\n\n"
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )

def support_message_handler(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = user.id
    if user_support_state.get(user_id):
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
        txt = f"‚ùóÔ∏è–í–æ–ø—Ä–æ—Å –æ—Ç @{user.username or '–Ω–µ—Ç username'} (id: {user.id}):\n"
        if update.message.text:
            context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=txt + update.message.text
            )
        elif update.message.photo:
            context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=update.message.photo[-1].file_id,
                caption=txt
            )
        elif update.message.document:
            context.bot.send_document(
                chat_id=ADMIN_CHAT_ID,
                document=update.message.document.file_id,
                caption=txt
            )
        elif update.message.voice:
            context.bot.send_voice(
                chat_id=ADMIN_CHAT_ID,
                voice=update.message.voice.file_id,
                caption=txt
            )
        update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!", reply_markup=main_menu_keyboard())
        user_support_state[user_id] = False

def unknown_message(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.",
        reply_markup=main_menu_keyboard()
    )

def error_handler(update, context):
    logger.error(f'–û—à–∏–±–∫–∞: {context.error}')
    if update and hasattr(update, 'message'):
        context.bot.send_message(
            chat_id=update.message.chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))

    # –í–æ–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ
    dp.add_handler(MessageHandler(
        Filters.text | Filters.photo | Filters.document | Filters.voice,
        support_message_handler
    ))
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ —á–µ—Ä–µ–∑ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
    dp.add_handler(MessageHandler(Filters.all, unknown_message))

    dp.add_error_handler(error_handler)

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()

if __name__ == "__main__":
    main()