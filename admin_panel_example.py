# –ü—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ Telegram –±–æ—Ç–µ
# –î–æ–±–∞–≤–∏—Ç—å –≤ bot_new.py

async def handle_admin_webapp_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üì± –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data='admin_add_model')],
        [InlineKeyboardButton("üìã –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data='admin_add_instruction')],
        [InlineKeyboardButton("üç≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data='admin_add_recipe')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data='admin_webapp_stats')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data='admin_refresh_cache')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_admin_add_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    user_states[query.from_user.id] = UserState(
        state='admin_add_model_name',
        data={}
    )
    
    await query.edit_message_text(
        "üì± **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:",
        parse_mode='Markdown'
    )

async def handle_admin_add_model_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    user_id = update.effective_user.id
    user_state = user_states.get(user_id)
    
    if not user_state or user_state.state != 'admin_add_model_name':
        return
    
    model_name = update.message.text
    user_state.data['name'] = model_name
    user_state.state = 'admin_add_model_description'
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:"
    )

async def handle_admin_add_model_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    user_id = update.effective_user.id
    user_state = user_states.get(user_id)
    
    if not user_state or user_state.state != 'admin_add_model_description':
        return
    
    description = update.message.text
    user_state.data['description'] = description
    user_state.state = 'admin_add_model_tags'
    
    await update.message.reply_text(
        "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )

async def handle_admin_add_model_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –º–æ–¥–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    user_state = user_states.get(user_id)
    
    if not user_state or user_state.state != 'admin_add_model_tags':
        return
    
    tags = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = get_session()
    try:
        models_service = ModelsService(db)
        new_model = models_service.create_model(
            name=user_state.data['name'],
            description=user_state.data['description'],
            tags=tags
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        await send_to_webapp_api('POST', '/api/models', {
            'name': new_model.name,
            'description': new_model.description,
            'tags': new_model.tags
        })
        
        await update.message.reply_text(
            f"‚úÖ **–ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
            f"üì± {new_model.name}\n"
            f"üìù {new_model.description}\n"
            f"üè∑Ô∏è {new_model.tags}\n\n"
            f"–ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_states:
            del user_states[user_id]

async def send_to_webapp_api(method: str, endpoint: str, data: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API"""
    import aiohttp
    
    url = f"https://gakshop.com{endpoint}"
    
    async with aiohttp.ClientSession() as session:
        if method == 'GET':
            async with session.get(url) as response:
                return await response.json()
        elif method == 'POST':
            async with session.post(url, json=data) as response:
                return await response.json()
        elif method == 'PUT':
            async with session.put(url, json=data) as response:
                return await response.json()
        elif method == 'DELETE':
            async with session.delete(url) as response:
                return await response.json()
